name: .NET Core CI Workflow

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
    - name: Print environment
      run: | 
        echo "Environment: ${{ inputs.environment }}"

    - name: Checkout code
      uses: actions/checkout@v4

    - name: List files in the repository
      run: ls -R

    - name: Read environment config
      id: config
      uses: actions/github-script@v5
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
    
          // Construct the absolute path to the config file
          const configPath = path.join(process.env.GITHUB_WORKSPACE, 'env-config.json');
    
          // Read the configuration file
          const configFile = fs.readFileSync(configPath);
          const config = JSON.parse(configFile);
    
          // Extract environment-specific config
          const envConfig = config[${{ inputs.environment }}];
          core.setOutput('dotnetVersion', envConfig.dotnetVersion);
          core.setOutput('dockerImage', envConfig.dockerImage);
          core.setOutput('dockerRegistry', envConfig.dockerRegistry);

    # - name: Show environment config
    #   run: |
    #     echo "Dotnet Version: ${{ steps.config.outputs.dotnetVersion }}"
    #     echo "Docker Image: ${{ steps.config.outputs.dockerImage }}"
    #     echo "Docker Registry: ${{ steps.config.outputs.dockerRegistry }}"

        
    # - name: Setup .NET Core
    #   uses: actions/setup-dotnet@v1
    #   with:
    #     dotnet-version: ${{ steps.config.outputs.dotnetVersion }}

    # - name: Restore dependencies
    #   run: dotnet restore

    # - name: Build
    #   run: dotnet build --no-restore

    # - name: Test
    #   run: dotnet test --no-build --verbosity normal

    # - name: Build Docker Image
    #   if: ${{ inputs.environment == 'production' }}
    #   run: |
    #     docker build -t ${{ steps.config.outputs.dockerRegistry }}/${{ steps.config.outputs.dockerImage }}:${{ github.sha }} .
    #     docker push ${{ steps.config.outputs.dockerRegistry }}/${{ steps.config.outputs.dockerImage }}:${{ github.sha }}